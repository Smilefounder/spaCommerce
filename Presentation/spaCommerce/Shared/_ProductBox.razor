@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IProductModelFactory productModelFactory
@inject IProductService productService
@inject IJSService jsService
@inject IShoppingCartComponentService shoppingCartComponentService
@inject NavigationManager uriHelper

@code{

    [Parameter] public int? ProductThumbPictureSize { get; set; }

    [Parameter] public ProductOverviewModel Model { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (CommonParams != null)
        {
            CommonParams.CurrencyChanged += OnCurrencyChanged;
        }
        await base.OnInitializedAsync();
    }


    private void OnCurrencyChanged(IComponent sender)
    {
        var product = productService.GetProductById(Model.Id);
        Model = productModelFactory.PrepareProductOverviewModels(new[] { product }, true, true, ProductThumbPictureSize).FirstOrDefault();
        StateHasChanged();
    }


    private async Task AddToCart(ShoppingCartType cartType)
    {
        await jsService.ShowLoadWaiting();
        var addToCartSummary = shoppingCartComponentService.AddProductToCart_Catalog(Model.Id, (int)cartType, 1, Model.ProductPrice.ForceRedirectionAfterAddingToCart);

        if (!string.IsNullOrEmpty(addToCartSummary.RedirectUrl) && addToCartSummary.RedirectUrl != Url.RouteUrl("ShoppingCart"))
        {
            await jsService.ResetLoadWaiting();
            uriHelper.NavigateTo(addToCartSummary.RedirectUrl);
            return;
        }

        CommonParams.OnProductAddedToCart(this, new ProductAddedToCartEventArgs()
        {
            //Product = productService.GetProductById(Model.Id),
            CartType = cartType
        });

        await jsService.ShowNotifications(addToCartSummary);
        await jsService.ResetLoadWaiting();
    }


    private async Task AddToCompareList(MouseEventArgs args)
    {
        await jsService.ShowLoadWaiting();
        var addToCartSummary = shoppingCartComponentService.AddProductToComparerList(Model.Id);

        if (!string.IsNullOrEmpty(addToCartSummary.RedirectUrl))
        {
            await jsService.ResetLoadWaiting();
            uriHelper.NavigateTo(addToCartSummary.RedirectUrl);
            return;
        }

        await jsService.ShowNotifications(addToCartSummary);
        await jsService.ResetLoadWaiting();
    }


    public override void Dispose()
    {
        CommonParams.CurrencyChanged += OnCurrencyChanged;
        base.Dispose();
    }
}

@if (Model != null)
{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    <div class="product-item" data-productid="@Model.Id">
        <div class="picture">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
                <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
            </a>
        </div>
        <div class="details">
            <div class="product-box-title-wrapper">
                <div class="product-title div-h2">
                    <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">
                        @Model.Name@if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                        {<tex>, </tex><span style="font-size:90%">арт.&nbsp;@Model.Sku</span>}
                    </a>
                </div>
            </div>
            @*@if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                {
                    <div class="sku">
                        @Model.Sku
                    </div>
                }*@
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                var ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
            <div class="description">
                @((MarkupString)Model.ShortDescription)
            </div>
            <div class="add-info">
                <Widget WidgetZone="@PublicWidgetZones.ProductBoxAddinfoBefore" AdditionalData="@Model.Id" />
                <div class="prices">
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
                <Widget WidgetZone="@PublicWidgetZones.ProductBoxAddinfoMiddle" AdditionalData="@Model.Id" />
                <div class="buttons">
                    @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                    @if (!Model.ProductPrice.DisableBuyButton)
                    {
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                        <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" @onclick="@(e => AddToCart(ShoppingCartType.ShoppingCart))" />
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton)
                    {
                        <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" @onclick="@AddToCompareList" />
                    }
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {
                        <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" @onclick="@(e => AddToCart(ShoppingCartType.Wishlist))" />
                    }
                </div>
                <Widget WidgetZone="@PublicWidgetZones.ProductBoxAddinfoAfter" AdditionalData="@Model.Id" />
            </div>
        </div>
    </div>
}