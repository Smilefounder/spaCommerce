@page "/customer/addresses"
@layout _ColumnsTwo
@inject ICustomerModelFactory customerModelFactory
@inject IJSService jsService
@inject IWorkContext workContext
@inject NavigationManager uriHelper
@inject ICustomerService customerService
@inject IAddressService addressService

@code{

    private CustomerAddressListModel Model { get; set; }

    protected override async Task DataRequest()
    {
        if (!workContext.CurrentCustomer.IsRegistered())
        {
            await jsService.DisplayBarNotification(new[] { "The current user isn't registred." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        Model = customerModelFactory.PrepareCustomerAddressListModel();
    }

    private async Task DeleteCustomerAddres(int addressId)
    {
        if (!workContext.CurrentCustomer.IsRegistered())
        {
            await jsService.DisplayBarNotification(new[] { "The current user isn't registred." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        var customer = workContext.CurrentCustomer;

        //find address (ensure that it belongs to the current customer)
        var address = customer.Addresses.FirstOrDefault(a => a.Id == addressId);
        if (address != null)
        {
            customerService.RemoveCustomerAddress(customer, address);
            customerService.UpdateCustomer(customer);
            //now delete the address record
            addressService.DeleteAddress(address);
        }

        StateHasChanged();
    }

    public RenderFragment LeftSection { get; set; } =@<CustomerNavigation SelectedTabId="(int)CustomerNavigationEnum.Addresses" />;
}

<div class="page account-page address-list-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
    </div>
    <div class="page-body">
        @if (needStub)
        {
            <LoadingStub />
        }
        else if (Model != null)
        {
            //title
            Html.AddTitleParts(T("PageTitle.Account").Text);
            //page class
            Html.AppendPageCssClassParts("html-account-page");
            Html.AppendPageCssClassParts("html-address-list-page");

            @if (Model.Addresses.Count > 0)
            {
                <div class="address-list">
                    @for (var i = 0; i < Model.Addresses.Count; i++)
                    {
                        var address = Model.Addresses[i];
                        <div class="section address-item">
                            <div class="title">
                                <strong>@address.FirstName @address.LastName</strong>
                            </div>
                            <ul class="info">
                                <li class="name">
                                    @address.FirstName @address.LastName
                                </li>
                                <li class="email">
                                    <label>@T("Address.Fields.Email"):</label>
                                    @address.Email
                                </li>
                                @if (address.PhoneEnabled)
                                {
                                    <li class="phone">
                                        <label>@T("Address.Fields.PhoneNumber"):</label>
                                        @address.PhoneNumber
                                    </li>
                                }
                                @if (address.FaxEnabled)
                                {
                                    <li class="fax">
                                        <label>@T("Address.Fields.FaxNumber"):</label>
                                        @address.FaxNumber
                                    </li>
                                }
                                @if (address.CompanyEnabled && !string.IsNullOrEmpty(address.Company))
                                {
                                    <li class="company">@address.Company</li>
                                }
                                @if (address.StreetAddressEnabled)
                                {
                                    <li class="address1">
                                        @address.Address1
                                    </li>
                                }
                                @if (address.StreetAddress2Enabled && !string.IsNullOrEmpty(address.Address2))
                                {
                                    <li class="address2">
                                        @address.Address2
                                    </li>
                                }
                                @if (address.CityEnabled && !string.IsNullOrEmpty(address.City) ||
address.CountyEnabled && !string.IsNullOrEmpty(address.County) ||
address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                {
                                    var addressLine = string.Empty;
                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += address.City;
                                        if (address.CountyEnabled && !string.IsNullOrEmpty(address.County) ||
                                            address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
                                            address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                        {
                                            addressLine += ", ";
                                        }
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += address.County;
                                        if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
                                            address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                        {
                                            addressLine += ", ";
                                        }
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += address.StateProvinceName;
                                        if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                        {
                                            addressLine += ", ";
                                        }
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += address.ZipPostalCode;
                                    }

                                    <li class="city-state-zip">
                                        @addressLine
                                    </li>
                                }
                                @if (address.CountryEnabled && !string.IsNullOrEmpty(address.CountryName))
                                {
                                    <li class="country">
                                        @address.CountryName
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                                {
                                    <li class="custom-attributes-view">
                                        @((MarkupString)address.FormattedCustomAddressAttributes)
                                    </li>
                                }
                            </ul>
                            <div class="buttons">
                                <input type="button" class="button-2 edit-address-button" @onclick="@(e => uriHelper.NavigateTo(Url.RouteUrl("CustomerAddressEdit", new { addressId = address.Id })))" value="@T("Common.Edit")" />
                                <input type="button" class="button-2 delete-address-button" @onclick="@(e => DeleteCustomerAddres(address.Id))" value="@T("Common.Delete")" />
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-data">
                    @T("Account.CustomerAddresses.NoAddresses")
                </div>
            }
            <div class="add-button">
                <input type="button" class="button-1 add-address-button" @onclick="@(e => uriHelper.NavigateTo(Url.RouteUrl("CustomerAddressAdd")))" value="@T("Common.AddNew")" />
            </div>

        }
    </div>
</div>