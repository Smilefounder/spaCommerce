@page  "/passwordrecovery"
@layout _ColumnsOne
@attribute [Authorize]
@inject ICustomerModelFactory customerModelFactory
@inject ICustomerService customerService
@inject IGenericAttributeService genericAttributeService
@inject IWorkflowMessageService workflowMessageService
@inject IWorkContext workContext
@inject ILocalizationService localizationService

@code{

    private PasswordRecoveryModel Model { get; set; }


    protected override Task DataRequest()
    {
        Model = customerModelFactory.PreparePasswordRecoveryModel();
        return Task.CompletedTask;
    }


    private Task OnValidSubmit(EditContext editContext)
    {
        var customer = customerService.GetCustomerByEmail(Model.Email);
        if (customer != null && customer.Active && !customer.Deleted)
        {
            //save token and current date
            var passwordRecoveryToken = Guid.NewGuid();
            genericAttributeService.SaveAttribute(customer, NopCustomerDefaults.PasswordRecoveryTokenAttribute,
                passwordRecoveryToken.ToString());
            DateTime? generatedDateTime = DateTime.UtcNow;
            genericAttributeService.SaveAttribute(customer,
                NopCustomerDefaults.PasswordRecoveryTokenDateGeneratedAttribute, generatedDateTime);

            //send email
            workflowMessageService.SendCustomerPasswordRecoveryMessage(customer,
                workContext.WorkingLanguage.Id);

            Model.Result = localizationService.GetResource("Account.PasswordRecovery.EmailHasBeenSent");
        }
        else
        {
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.EmailNotFound");
        }

        return Task.CompletedTask;
    }
}

@if (needStub)
{
    <LoadingStub />
}
else if (Model != null)
{
    //title
    Html.AddTitleParts(T("PageTitle.PasswordRecovery").Text);
    //page class
    Html.AppendPageCssClassParts("html-password-recovery-page");

    <div class="page password-recovery-page">
        <div class="page-title">
            <h1>@T("Account.PasswordRecovery")</h1>
        </div>
        <div class="page-body">
            @if (!string.IsNullOrEmpty(Model.Result))
            {
                <div class="result">
                    @Model.Result
                </div>
            }
        <EditForm Model="Model" OnValidSubmit="OnValidSubmit" method="post">
            <FluentValidationValidator />
            <ValidationSummary />
            <p class="tooltip">@T("Account.PasswordRecovery.Tooltip")</p>
            <div class="fieldset">
                <div class="form-fields">
                    <div class="inputs">
                        <LabelText For="@(()=>Model.Email)" Postfix=":"></LabelText>
                        <InputText @bind-Value="@Model.Email" type="email" class="email" />
                        <Required />
                        <ValidationMessage For="@(()=>Model.Email)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="buttons">
                <input type="submit" name="send-email" class="button-1 password-recovery-button" value="@T("Account.PasswordRecovery.RecoverButton")" />
            </div>
        </EditForm>
        </div>
    </div>
}