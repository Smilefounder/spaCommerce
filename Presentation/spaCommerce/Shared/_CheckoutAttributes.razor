@using System.Text
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Media
@using Nop.Services.Media
@using Microsoft.Extensions.Primitives
@using spaCommerce.Models;

@inject IDownloadService downloadService
@inject CatalogSettings catalogSettings

@code{

    [Parameter] public ShoppingCartModel Model { get; set; }


    private Task OnDropDownChange(string key, ChangeEventArgs e)
    {
        var form = Model.CheckoutAttributes.AttributeFormCollection;
        form[key] = e.Value.ToString();

        StateHasChanged();
        return Task.CompletedTask;
    }


    private Task OnRadioListChecked(string key, ChangeEventArgs e)
    {
        var form = Model.CheckoutAttributes.AttributeFormCollection;
        form[key] = e.Value.ToString();

        CommonParams.OnCheckoutAttributeChanged(this);
        StateHasChanged();


        return Task.CompletedTask;
    }


    private Task OnReadonlyCheckboxesChanged(string key, int attributeId, ChangeEventArgs e)
    {
        var form = Model.CheckoutAttributes.AttributeFormCollection;

        var selectedValues = (form[key]?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[] { }).ToList();
       
        if (bool.Parse(e.Value.ToString()))
        {
            selectedValues.Add(attributeId.ToString());
            selectedValues.Distinct();
        }
        else
        {
            selectedValues.Remove(attributeId.ToString());
        }

        form[key] = string.Join(',', selectedValues.ToArray());

        StateHasChanged();
        return Task.CompletedTask;
    }
}

@if (needStub)
{
    <LoadingStub />
}
else if (Model != null && Model.CheckoutAttributes.Count > 0)
{
    var form = Model.CheckoutAttributes.AttributeFormCollection;
    var disabledAttributeMappingIds = Model.CheckoutAttributes.DisabledAttributeMappingIds ?? new int[] { };
    var enabledAttributeMappingIds = Model.CheckoutAttributes.EnabledAttributeMappingIds ?? new int[] { };


    <div class="checkout-attributes">
        <dl>
            @foreach (var attr in Model.CheckoutAttributes)
            {
                var controlId = $"checkout_attribute_{attr.Id}";
                var textPrompt = !string.IsNullOrEmpty(attr.TextPrompt) ? attr.TextPrompt : attr.Name;

                var showHideInput = enabledAttributeMappingIds.Contains(attr.Id) ? "display:block;" : (disabledAttributeMappingIds.Contains(attr.Id) ? "display:none" : null);


                <dt id="@($"checkout_attribute_label_{attr.Id}")" style="@showHideInput">
                    <label class="text-prompt">
                        @textPrompt
                    </label>
                    @if (attr.IsRequired)
                    {
                        <span class="required">*</span>
                    }
                </dt>
                <dd id="@($"checkout_attribute_input_{attr.Id}")" style="@showHideInput">
                    @switch (attr.AttributeControlType)
                    {
                        case AttributeControlType.DropdownList:
                            {
                                <select name="@(controlId)" id="@(controlId)" value="@form[controlId]" @onchange="@(async e=> await OnDropDownChange(controlId, e))">
                                    @if (!attr.IsRequired)
                                    {
                                        <option value="0">---</option>
                                    }
                                    @foreach (var attributeValue in attr.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                        <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeName</option>
                                    }
                                </select>
                            }
                            break;
                        case AttributeControlType.RadioList:
                            {
                                <ul class="option-list">
                                    @foreach (var attributeValue in attr.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;

                                        var @checked = form[controlId] == attributeValue.Id.ToString() ? "checked" : null;
                                        <li>
                                            <input value="@attributeValue.Id" @onchange="@(async e => await OnRadioListChecked(controlId, e))" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" checked="@(@checked)" />
                                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                        </li>
                                    }
                                </ul>
                            }
                            break;
                        case AttributeControlType.Checkboxes:
                        case AttributeControlType.ReadonlyCheckboxes:
                            {
                                <ul class="option-list">
                                    @foreach (var attributeValue in attr.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;

                                        var selectedValues = (form[controlId]?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[] { }).ToList();

                                        <li>
                                            <input id="@(controlId)_@(attributeValue.Id)" @onchange="@(async e=> await OnReadonlyCheckboxesChanged(controlId, attributeValue.Id, e))" type="checkbox" name="@(controlId)" value="@form[controlId]" checked="@(selectedValues.Contains(attributeValue.Id.ToString()))" />
                                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                        </li>
                                    }
                                </ul>
                            }
                            break;
                        case AttributeControlType.TextBox:
                            {
                                <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" @bind="@form[controlId]" />
                            }
                            break;
                        case AttributeControlType.MultilineTextbox:
                            {
                                <textarea id="@(controlId)" @bind="@form[controlId]" name="@(controlId)">@form[controlId]</textarea>
                            }
                            break;
                        case AttributeControlType.Datepicker:
                            {
                                // todo date picker implementation
                                <nop-date-picker asp-day-name="@(controlId + "_day")"
                                                 asp-month-name="@(controlId + "_month")"
                                                 asp-year-name="@(controlId + "_year")"
                                                 asp-begin-year="@(DateTime.Now.Year)"
                                                 asp-end-year="@(DateTime.Now.Year + catalogSettings.CountDisplayedYearsDatePicker)"
                                                 asp-selected-day="@attr.SelectedDay"
                                                 asp-selected-month="@attr.SelectedMonth"
                                                 asp-selected-year="@attr.SelectedYear" />
                            }
                            break;
                        case AttributeControlType.FileUpload:
                            {
                                // todo file upload implementation
                                Download download = null;
                                if (!string.IsNullOrEmpty(attr.DefaultValue))
                                {
                                    download = downloadService.GetDownloadByGuid(new Guid(attr.DefaultValue));
                                }

                                //register CSS and JS
                                Html.AddCssFileParts("~/lib/fineuploader/fine-uploader.min.css");
                                Html.AddScriptParts(ResourceLocation.Footer, "~/lib/fineuploader/jquery.fine-uploader.min.js");

                                //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                                var allowedFileExtensions = string.Join(", ", attr.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                                if (download != null)
                                {
                                    <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid" />
                                }
                                else
                                {
                                    <input id="@(controlId)" name="@(controlId)" type="hidden" />
                                }

                                @*fine uploader container*@
                                <div id="@(controlId)uploader"></div>

                                <div id="@(controlId + "downloadurl")">
                                    @if (download != null)
                                    {
                                        <a href="@(Url.GetPathByAction("GetFileUpload", "Download", new { downloadId = download.DownloadGuid }))" class="download-uploaded-file">@T("Common.FileUploader.DownloadUploadedFile")</a>
                                    }
                                </div>
                                <div>
                                    @if (download != null)
                                    {
                                        <a id="@(controlId + "remove")" class="remove-download-button">@T("Common.FileUploader.RemoveDownload")</a>
                                    }
                                    else
                                    {
                                        <a id="@(controlId + "remove")" class="remove-download-buttonn" style="display:none;">@T("Common.FileUploader.RemoveDownload")</a>
                                    }
                                </div>
                            }
                            break;
                        case AttributeControlType.ColorSquares:
                            {
                                <ul class="option-list attribute-squares color-squares" id="color-squares-@(attr.Id)">
                                    @foreach (var attributeValue in attr.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;

                                        var @checked = form[controlId] == attributeValue.Id.ToString() ? "checked" : null;

                                        <li class="@(form[controlId] == attributeValue.Id.ToString() ? "selected-value" : null)">
                                            <label for="@(controlId)_@(attributeValue.Id)">
                                                <span class="attribute-square-container" title="@attributeName">
                                                    <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                                </span>
                                                <input value="@attributeValue.Id" @onchange="@(async e => await OnRadioListChecked(controlId, e))" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" checked="@(@checked)" />
                                                @*uncomment below to display attribute value name*@
                                                @*<span class="name">@attributeName</span>*@
                                            </label>
                                        </li>
                                    }
                                </ul>

                            }
                            break;
                        case AttributeControlType.ImageSquares:
                            {
                                //not support attribute type
                            }
                            break;
                    }
                </dd>
            }
        </dl>
    </div>

}