@page "/passwordrecovery/confirm"
@layout _ColumnsOne
@attribute [Authorize]
@inject IJSService jsService
@inject NavigationManager uriHelper
@inject ICustomerService customerService
@inject ILocalizationService localizationService
@inject IGenericAttributeService genericAttributeService
@inject ICustomerModelFactory customerModelFactory
@inject ICustomerRegistrationService customerRegistrationService
@inject CustomerSettings customerSettings
@inject IGenericAttributeService genericAttributeService

@code{

    private PasswordRecoveryConfirmModel Model { get; set; }
    private string email;
    private string token;

    protected override async Task DataRequest()
    {
        email = uriHelper.GetQueryParameterValues<string>("email").FirstOrDefault();

        var customer = customerService.GetCustomerByEmail(email);
        if (customer == null)
        {
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }
        if (string.IsNullOrEmpty(genericAttributeService.GetAttribute<string>(customer, NopCustomerDefaults.PasswordRecoveryTokenAttribute)))
        {
            Model = new PasswordRecoveryConfirmModel
            {
                DisablePasswordChanging = true,
                Result = localizationService.GetResource("Account.PasswordRecovery.PasswordAlreadyHasBeenChanged")
            };

            return;
        }

        Model = customerModelFactory.PreparePasswordRecoveryConfirmModel();

        token = uriHelper.GetQueryParameterValues<string>("token").FirstOrDefault();
        //validate token
        if (!customerService.IsPasswordRecoveryTokenValid(customer, token))
        {
            Model.DisablePasswordChanging = true;
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.WrongToken");
        }

        //validate token expiration date
        if (customerService.IsPasswordRecoveryLinkExpired(customer))
        {
            Model.DisablePasswordChanging = true;
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.LinkExpired");
        }

        await Task.CompletedTask;
    }



    private async Task OnValidSubmit(EditContext editContext)
    {
        var customer = customerService.GetCustomerByEmail(email);

        if (customer == null)
        {
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        //validate token
        if (!customerService.IsPasswordRecoveryTokenValid(customer, token))
        {
            Model.DisablePasswordChanging = true;
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.WrongToken");
            return;
        }

        //validate token expiration date
        if (customerService.IsPasswordRecoveryLinkExpired(customer))
        {
            Model.DisablePasswordChanging = true;
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.LinkExpired");
            return;
        }


        var response = customerRegistrationService.ChangePassword(new ChangePasswordRequest(email,
            false, customerSettings.DefaultPasswordFormat, Model.NewPassword));
        if (response.Success)
        {
            genericAttributeService.SaveAttribute(customer, NopCustomerDefaults.PasswordRecoveryTokenAttribute, "");

            Model.DisablePasswordChanging = true;
            Model.Result = localizationService.GetResource("Account.PasswordRecovery.PasswordHasBeenChanged");
        }
        else
        {
            Model.Result = response.Errors.FirstOrDefault();
        }

        await Task.CompletedTask;

    }

}

@if (needStub)
{
    <LoadingStub />
}
else if (Model != null)
{

    //title
    Html.AddTitleParts(T("PageTitle.PasswordRecovery").Text);
    //page class
    Html.AppendPageCssClassParts("html-password-recovery-page");

    <div class="page password-recovery-page">
        <div class="page-title">
            <h1>@T("Account.PasswordRecovery")</h1>
        </div>
        <div class="page-body">
            @if (!string.IsNullOrEmpty(Model.Result))
            {
                <div class="result">
                    @Model.Result
                </div>
            }
            @if (!Model.DisablePasswordChanging)
            {
        <EditForm Model="Model" OnValidSubmit="OnValidSubmit" method="post">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="fieldset">
                <div class="form-fields">
                    <div class="inputs">
                        <LabelText For="@(()=>Model.NewPassword)" Postfix=":"></LabelText>
                        <InputText @bind-Value="Model.NewPassword" type="text" />
                        <Required />
                        <ValidationMessage For="@(()=>Model.NewPassword)"></ValidationMessage>
                    </div>
                    <div class="inputs">
                        <LabelText For="@(()=>Model.ConfirmNewPassword)" Postfix=":"></LabelText>
                        <InputText @bind-Value="Model.ConfirmNewPassword" type="text" />
                        <Required />
                        <ValidationMessage For="@(()=>Model.ConfirmNewPassword)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="buttons">
                <input type="submit" name="set-password" class="button-1 new-password-button" value="@T("Account.PasswordRecovery.ChangePasswordButton")" />
            </div>
        </EditForm>
            }
        </div>
    </div>
}