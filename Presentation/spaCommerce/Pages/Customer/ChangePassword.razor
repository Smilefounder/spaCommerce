@page "/customer/changepassword"
@layout _ColumnsTwo
@attribute [Authorize]
@inject NavigationManager uriHelper
@inject IJSService jsService
@inject IWorkContext workContext
@inject CustomerSettings customerSettings
@inject ILocalizationService localizationService
@inject ICustomerService customerService
@inject ICustomerRegistrationService customerRegistrationService
@inject ICustomerModelFactory customerModelFactory

@code{
    private ChangePasswordModel Model { get; set; }

    public RenderFragment LeftSection { get; set; } = _builder =>
    {
        _builder.OpenComponent<CustomerNavigation>(0);
        _builder.AddAttribute(1, "SelectedTabId", (int)CustomerNavigationEnum.Addresses);
        _builder.CloseComponent();
    };


    protected override async Task DataRequest()
    {
        if (!workContext.CurrentCustomer.IsRegistered())
        {
            await jsService.DisplayBarNotification(new[] { "The current user isn't registred." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        Model = customerModelFactory.PrepareChangePasswordModel();

        //display the cause of the change password
        if (customerService.PasswordIsExpired(workContext.CurrentCustomer))
        {
            await jsService.DisplayBarNotification(new[] { localizationService.GetResource("Account.ChangePassword.PasswordIsExpired") }, JSMessageType.Warning);
        }
    }


    private async Task OnValidSubmit(EditContext editContext)
    {
        if (!workContext.CurrentCustomer.IsRegistered())
        {
            await jsService.DisplayBarNotification(new[] { "The current user isn't registred." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        var customer = workContext.CurrentCustomer;

        var changePasswordRequest = new ChangePasswordRequest(customer.Email,
            true, customerSettings.DefaultPasswordFormat, Model.NewPassword, Model.OldPassword);
        var changePasswordResult = customerRegistrationService.ChangePassword(changePasswordRequest);
        if (changePasswordResult.Success)
        {
            Model.Result = localizationService.GetResource("Account.ChangePassword.Success");
        }
        else if (changePasswordResult.Errors.Any())
        {
            await jsService.DisplayBarNotification(changePasswordResult.Errors.ToArray(), JSMessageType.Error);
        }
    }
}

<div class="page account-page change-password-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.ChangePassword")</h1>
    </div>

    @if (needStub)
    {
        <LoadingStub />
    }
    else if (Model != null)
    {
        //title
        Html.AddTitleParts(T("PageTitle.Account").Text);
        //page class
        Html.AppendPageCssClassParts("html-account-page");
        Html.AppendPageCssClassParts("html-change-password-page");
        
        <div class="page-body">
            @if (!string.IsNullOrEmpty(Model.Result))
            {
                <div class="result">
                    @Model.Result
                </div>
            }
        <EditForm Model="Model" OnValidSubmit="OnValidSubmit" method="post">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="fieldset">
                <div class="form-fields">
                    <div class="inputs">
                        <LabelText For="@(()=>Model.OldPassword)" Postfix=":" />
                        <InputText @bind-Value="Model.OldPassword" type="text" />
                        <Required />
                        <ValidationMessage For="@(()=> Model.OldPassword)" />
                    </div>
                    <div class="inputs">
                        <LabelText For="@(()=>Model.NewPassword)" Postfix=":" />
                        <InputText @bind-Value="Model.NewPassword" type="text" />
                        <Required />
                        <ValidationMessage For="@(()=> Model.NewPassword)" />
                    </div>
                    <div class="inputs">
                        <LabelText For="@(()=>Model.ConfirmNewPassword)" Postfix=":" />
                        <InputText @bind-Value="Model.ConfirmNewPassword" type="text" />
                        <Required />
                        <ValidationMessage For="@(()=> Model.ConfirmNewPassword)" />
                    </div>
                </div>
            </div>
            <div class="buttons">
                <input type="submit" class="button-1 change-password-button" value="@T("Account.ChangePassword.Button")" />
            </div>
        </EditForm>
        </div>
    }
</div>