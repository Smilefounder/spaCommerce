@page "/search"
@using Microsoft.AspNetCore.WebUtilities
@using Nop.Core.Domain.Customers
@inject Nop.Services.Logging.ICustomerActivityService customerActivityService
@inject Nop.Core.IWorkContext workContext
@inject Nop.Services.Common.IGenericAttributeService genericAttributeService
@inject Nop.Core.IWebHelper webHelper
@inject Nop.Core.IStoreContext storeContext
@inject ICatalogModelFactory catalogModelFactory
@inject NavigationManager uriHelper

@code{

    private Models.Catalog.SearchModel Model { get; set; }

    private CatalogPagingFilteringModel Command { get; set; }

    private string advanceSearchBlockShowStyle;


    protected override Task OnInitializedAsync()
    {
        try
        {
            // TODO 'Continue shopping' URL. It works properly only first page load (from the controller)
            genericAttributeService.SaveAttribute(workContext.CurrentCustomer,
                NopCustomerDefaults.LastContinueShoppingPageAttribute, webHelper.GetThisPageUrl(false), storeContext.CurrentStore.Id);
        }
        catch { }

        uriHelper.LocationChanged += SearchOnLocationChanged;
        return base.OnInitializedAsync();
    }


    private async void SearchOnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (CommonParams.Router.IsPathChangedOnCurrentPage())
        {
            needStub = true;
            StateHasChanged();
            await DataRequest();
            needStub = false;
            StateHasChanged();
        }
    }


    protected override async Task DataRequest()
    {
        try
        {
            Model = uriHelper.SetModelFromQuery<Models.Catalog.SearchModel>();
            Command = uriHelper.SetModelFromQuery<CatalogPagingFilteringModel>();
            Model = catalogModelFactory.PrepareSearchModel(Model, Command);
        }
        catch { }

        await base.DataRequest();
    }


    protected void OnValidSubmit(EditContext editContext)
    {
        try
        {
            var query = uriHelper.ModifyQueryString(new { Model.q, Model.adv, Model.cid, Model.mid, Model.isc, Model.sid, Model.pf, Model.pt });
            uriHelper.NavigateTo(uriHelper.GetRelativePath() + query);
        }
        catch { }
    }


    protected void AdvanceSearchCheckBoxChange(ChangeEventArgs args)
    {
        if (bool.TryParse(args.Value.ToString(), out bool check))
            advanceSearchBlockShowStyle = check ? "display: block;" : "display: none;";
    }


    protected override Task OnceOnAfterRenderAsync()
    {
        //title
        Html.AddTitleParts(T("PageTitle.Search").Text);
        //page class
        Html.AppendPageCssClassParts("html-search-page");

        return base.OnceOnAfterRenderAsync();
    }


    public override void Dispose()
    {
        uriHelper.LocationChanged -= SearchOnLocationChanged;
        base.Dispose();
    }
}

@if (needStub && CommonParams.Router.IsAbsolutePathChanged())
{
    <LoadingStub />
}
else if (Model != null)
{
    <div class="page search-page">
        <div class="page-title">
            <h1>@T("Search")</h1>
        </div>
        <div class="page-body">
            <div class="search-input">
                <EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="basic-search">
                                <div class="inputs">
                                    <LabelText For="@(()=>Model.q)">@T("Search.SearchTerm"):</LabelText>
                                    <InputText @bind-Value="@Model.q" class="search-text" type="text" />
                                </div>
                                <Widget WidgetZone="productsearch_page_basic" />
                                <div class="inputs reversed">
                                    <InputCheckbox @bind-Value="@Model.adv" @oninput="@AdvanceSearchCheckBoxChange" />
                                    <label for="adv">@T("Search.AdvancedSearch")</label>
                                </div>
                            </div>
                            <div class="advanced-search" id="advanced-search-block" style="@advanceSearchBlockShowStyle">
                                @if (Model.AvailableCategories.Count > 0)
                                {
                                    <div class="inputs">
                                        <label for="cid">@T("Search.Category"):</label>
                                        <InputSelect @bind-Value="@Model.cid">
                                            @foreach (var cat in Model.AvailableCategories)
                                                    {
                                                <option selected="@cat.Selected" value="@cat.Value">@cat.Text</option>
                                                    }
                                        </InputSelect>
                                    </div>
                                    <div class="inputs reversed">
                                        <InputCheckbox @bind-Value="@Model.isc" />
                                        <LabelText For="@(()=>Model.isc)">@T("Search.IncludeSubCategories")</LabelText>
                                    </div>
                                }
                                @if (Model.AvailableManufacturers.Count > 0)
                                {
                                    <div class="inputs">
                                        <LabelText For="@(()=>Model.mid)">@T("Search.Manufacturer"):</LabelText>
                                        <InputSelect @bind-Value="@Model.mid">
                                            @foreach (var manufacturer in Model.AvailableManufacturers)
                                                    {
                                                <option selected="@manufacturer.Selected" value="@manufacturer.Value">@manufacturer.Text</option>
                                                    }
                                        </InputSelect>
                                    </div>
                                }
                                @if (Model.asv && Model.AvailableVendors.Count > 0)
                                {
                                    <div class="inputs">
                                        <LabelText For="@(()=>Model.vid)">@T("Search.Vendor"):</LabelText>
                                        <select asp-for="vid" asp-items="Model.AvailableVendors"></select>
                                    </div>
                                }
                                <div class="inputs">
                                    <label>@T("Search.PriceRange"):</label>
                                    <span class="price-range">
                                        @T("Search.PriceRange.From")
                                        <InputText @bind-Value="@Model.pf" class="price-from" type="text" />
                                        @T("Search.PriceRange.To")
                                        <InputText @bind-Value="@Model.pt" class="price-to" type="text" />
                                    </span>
                                </div>
                                <div class="inputs reversed">
                                    <InputCheckbox @bind-Value="@Model.sid" />
                                    <LabelText For="@(()=>Model.sid)">@T("Search.SearchInDescriptions")</LabelText>
                                </div>
                                <Widget WidgetZone="productsearch_page_advanced" />
                            </div>
                        </div>
                    </div>
                    <div class="buttons">
                        <input type="submit" class="button-1 search-button" value="@T("Search.Button")" />
                    </div>
                </EditForm>
            </div>

            @if (Model.Products.Count > 0)
            {
                <_CatalogSelectors Model="@Model.PagingFilteringContext" />
            }
            <Widget WidgetZone="@PublicWidgetZones.ProductSearchPageBeforeResults" />

            <div class="search-results">
                <Pager Model="@Model.PagingFilteringContext" />
                @if (needStub)
                {
                    <LoadingStub />
                }
                else
                {
                    @if (!string.IsNullOrEmpty(Model.Warning))
                    {
                        <div class="warning">
                            @Model.Warning
                        </div>
                    }
                    @if (Model.NoResults)
                    {
                        <div class="no-result">
                            @T("Search.NoResultsText")
                        </div>
                    }
                    @if (Model.Products.Count > 0)
                    {
                        <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                            <div class="item-grid">
                                @foreach (var product in Model.Products)
                                {
                                    <div class="item-box">
                                        <_ProductBox Model="@product" />
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                <Pager Model="@Model.PagingFilteringContext" />
            </div>
            <Widget WidgetZone="@PublicWidgetZones.ProductSearchPageAfterResults" />
        </div>
    </div>
}
