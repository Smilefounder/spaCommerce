@page "/checkout/shippingaddress"
@page "/checkout/selectshippingaddress"
@layout _ColumnsOne
@using Nop.Core.Domain.Shipping
@inject NavigationManager uriHelper
@inject OrderSettings orderSettings
@inject IWorkContext workContext
@inject IStoreContext storeContext
@inject IJSService jsService
@inject ICheckoutModelFactory checkoutModelFactory
@inject ICustomerService customerService
@inject IGenericAttributeService genericAttributeService
@inject IShoppingCartService shoppingCartService
@inject ShippingSettings shippingSettings
@inject IAddressAttributeParser addressAttributeParser
@inject IAddressService addressService
@inject IJSRuntime jsRuntime
@inject ILocalizationService localizationService
@inject Nop.Services.Shipping.IShippingService shippingService

@code
{
    private CheckoutShippingAddressModel Model { get; set; }
    private ElementReference pickupInStoreElement;
    private string selectedPointName;


    protected override async Task DataRequest()
    {
        //validation
        if (orderSettings.CheckoutDisabled)
        {
            await jsService.DisplayBarNotification(new[] { "Checkout is disabled." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("ShoppingCart"));
            return;
        }

        var cart = workContext.CurrentCustomer.ShoppingCartItems
            .Where(sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart)
            .LimitPerStore(storeContext.CurrentStore.Id)
            .ToList();

        if (!cart.Any())
        {
            uriHelper.NavigateTo(Url.RouteUrl("ShoppingCart"));
            return;
        }

        if (workContext.CurrentCustomer.IsGuest() && !orderSettings.AnonymousCheckoutAllowed)
        {
            await jsService.DisplayBarNotification(new[] { "Anonymous checkout is not allowed." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        if (!shoppingCartService.ShoppingCartRequiresShipping(cart))
        {
            workContext.CurrentCustomer.ShippingAddress = null;
            customerService.UpdateCustomer(workContext.CurrentCustomer);
            uriHelper.NavigateTo(Url.RouteUrl("CheckoutShippingMethod"));
            return;
        }

        Model = checkoutModelFactory.PrepareShippingAddressModel(prePopulateNewAddressWithCustomerFields: true);
    }


    private async Task SelectShippingAddress(int addressId)
    {
        //validation
        if (orderSettings.CheckoutDisabled)
        {
            uriHelper.NavigateTo(Url.RouteUrl("ShoppingCart"));
            return;
        }

        var address = workContext.CurrentCustomer.Addresses.FirstOrDefault(a => a.Id == addressId);
        if (address == null)
        {
            //uriHelper.NavigateTo(Url.RouteUrl("CheckoutShippingAddress"));
            return;
        }

        workContext.CurrentCustomer.ShippingAddress = address;
        customerService.UpdateCustomer(workContext.CurrentCustomer);

        if (shippingSettings.AllowPickUpInStore)
        {
            //set value indicating that "pick up in store" option has not been chosen
            genericAttributeService.SaveAttribute<PickupPoint>(workContext.CurrentCustomer, NopCustomerDefaults.SelectedPickupPointAttribute, null, storeContext.CurrentStore.Id);
        }

        uriHelper.NavigateTo(Url.RouteUrl("CheckoutShippingMethod"));
        await Task.CompletedTask;
    }


    protected override async Task OnceOnAfterRenderAsync()
    {
        try
        {
            if (Model.DisplayPickupPointsOnMap)
            {
                await jsRuntime.InvokeVoidAsync("ShippingAddress.Map",
                    pickupInStoreElement,
                    $"https://maps.googleapis.com/maps/api/js{(string.IsNullOrEmpty(Model.GoogleMapsApiKey) ? string.Empty : $"?key={Model.GoogleMapsApiKey}")}",
                    Model.PickupPoints.Select(x => new
                    {
                        x.Id,
                        x.Address,
                        x.City,
                        x.CountryName,
                        x.County,
                        x.Description,
                        x.Latitude,
                        x.Longitude,
                        x.Name,
                        x.OpeningHours,
                        x.PickupFee,
                        x.ProviderSystemName,
                        x.StateName,
                        x.ZipPostalCode

                    }).ToArray());
            }
        }
        catch { }
    }


    private async Task OnValidSubmit(EditContext editContext)
        => await NewShippingAddress(Model);


    private async Task NewShippingAddress(CheckoutShippingAddressModel model)
    {
        //validation
        if (orderSettings.CheckoutDisabled)
        {
            await jsService.DisplayBarNotification(new[] { "Checkout is disabled." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("ShoppingCart"));
            return;
        }

        var cart = workContext.CurrentCustomer.ShoppingCartItems
            .Where(sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart)
            .LimitPerStore(storeContext.CurrentStore.Id)
            .ToList();

        if (!cart.Any())
        {
            uriHelper.NavigateTo(Url.RouteUrl("ShoppingCart"));
            return;
        }

        if (workContext.CurrentCustomer.IsGuest() && !orderSettings.AnonymousCheckoutAllowed)
        {
            await jsService.DisplayBarNotification(new[] { "Anonymous checkout is not allowed." }, JSMessageType.Error);
            uriHelper.NavigateTo(Url.RouteUrl("HomePage"));
            return;
        }

        if (!shoppingCartService.ShoppingCartRequiresShipping(cart))
        {
            workContext.CurrentCustomer.ShippingAddress = null;
            customerService.UpdateCustomer(workContext.CurrentCustomer);
            uriHelper.NavigateTo(Url.RouteUrl("CheckoutShippingMethod"));
            return;
        }

        //pickup point
        if (shippingSettings.AllowPickUpInStore)
        {
            if (model.PickUpInStore)
            {
                //no shipping address selected
                workContext.CurrentCustomer.ShippingAddress = null;
                customerService.UpdateCustomer(workContext.CurrentCustomer);

                var pickupPoint = selectedPointName.Split(new[] { "___" }, StringSplitOptions.None);
                var pickupPoints = shippingService.GetPickupPoints(workContext.CurrentCustomer.BillingAddress,
                    workContext.CurrentCustomer, pickupPoint[1], storeContext.CurrentStore.Id).PickupPoints.ToList();
                var selectedPoint = pickupPoints.FirstOrDefault(x => x.Id.Equals(pickupPoint[0]));
                if (selectedPoint == null)
                {
                    await jsService.DisplayBarNotification(new[] { "Pickup point is not selected or does not exist." }, JSMessageType.Error);
                    return;

                }

                var pickUpInStoreShippingOption = new ShippingOption
                {
                    Name = string.Format(localizationService.GetResource("Checkout.PickupPoints.Name"), selectedPoint.Name),
                    Rate = selectedPoint.PickupFee,
                    Description = selectedPoint.Description,
                    ShippingRateComputationMethodSystemName = selectedPoint.ProviderSystemName
                };

                genericAttributeService.SaveAttribute(workContext.CurrentCustomer, NopCustomerDefaults.SelectedShippingOptionAttribute, pickUpInStoreShippingOption, storeContext.CurrentStore.Id);
                genericAttributeService.SaveAttribute(workContext.CurrentCustomer, NopCustomerDefaults.SelectedPickupPointAttribute, selectedPoint, storeContext.CurrentStore.Id);

                uriHelper.NavigateTo(Url.RouteUrl("CheckoutPaymentMethod"));
                return;
            }

            //set value indicating that "pick up in store" option has not been chosen
            genericAttributeService.SaveAttribute<PickupPoint>(workContext.CurrentCustomer, NopCustomerDefaults.SelectedPickupPointAttribute, null, storeContext.CurrentStore.Id);
        }

        //custom address attributes
        var customAttributes = addressAttributeParser.ParseCustomAddressAttributes(model.Form ?? new FormCollection(new Dictionary<string, Microsoft.Extensions.Primitives.StringValues>()));
        var customAttributeWarnings = addressAttributeParser.GetAttributeWarnings(customAttributes);
        if (customAttributeWarnings.Any())
        {
            await jsService.DisplayBarNotification(customAttributeWarnings.ToArray(), JSMessageType.Error);
            return;
        }

        var newAddress = model.ShippingNewAddress;


        //try to find an address with the same values (don't duplicate records)
        var address = addressService.FindAddress(workContext.CurrentCustomer.Addresses.ToList(),
            newAddress.FirstName, newAddress.LastName, newAddress.PhoneNumber,
            newAddress.Email, newAddress.FaxNumber, newAddress.Company,
            newAddress.Address1, newAddress.Address2, newAddress.City,
            newAddress.County, newAddress.StateProvinceId, newAddress.ZipPostalCode,
            newAddress.CountryId, customAttributes);
        if (address == null)
        {
            address = newAddress.ToEntity();
            address.CustomAttributes = customAttributes;
            address.CreatedOnUtc = DateTime.UtcNow;
            //some validation
            if (address.CountryId == 0)
                address.CountryId = null;
            if (address.StateProvinceId == 0)
                address.StateProvinceId = null;
            //_workContext.CurrentCustomer.Addresses.Add(address);
            workContext.CurrentCustomer.CustomerAddressMappings.Add(new CustomerAddressMapping { Address = address });
        }
        workContext.CurrentCustomer.ShippingAddress = address;
        customerService.UpdateCustomer(workContext.CurrentCustomer);

        uriHelper.NavigateTo(Url.RouteUrl("CheckoutShippingMethod"));
    }
}

<div class="page checkout-page shipping-address-page">
    <CheckoutProgress Step=@CheckoutProgressStep.Address />
    <div class="page-title">
        <h1>@T("Checkout.ShippingAddress")</h1>
    </div>
    @if (needStub)
    {
        <LoadingStub />
    }
    else if (Model != null)
    {
        //title
        Html.AddTitleParts(T("PageTitle.Checkout").Text);
        //page class
        Html.AppendPageCssClassParts("html-checkout-page");
        Html.AppendPageCssClassParts("html-shipping-address-page");

        <div class="page-body checkout-data">
            <EditForm Model="Model.ShippingNewAddress" OnValidSubmit="OnValidSubmit" method="post">
                <FluentValidationValidator />
                @if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
                {
                    <div class="section pickup-in-store">
                        <div class="selector">
                            <input type="checkbox" @bind-value="@Model.PickUpInStore" @ref="pickupInStoreElement" />
                            <label asp-for="PickUpInStore">@T("Checkout.PickupPoints")</label>
                        </div>
                        <div class="description">
                            @T("Checkout.PickupPoints.Description")
                        </div>
                    </div>
                }

                @if (Model.AllowPickUpInStore)
                {
                    <div class="section pickup-points" id="pickup-points-form" style="display:@(Model.PickUpInStore ? "block;" : "none;")">
                        @if (Model.PickupPoints.Any())
                        {
                            if (Model.PickUpInStoreOnly)
                            {
                                <input type="checkbox" @bind-value="@Model.PickUpInStore" style="display:none;" @ref="pickupInStoreElement" />
                            }
                            <div class="select-pickup-point">
                                @if (Model.PickupPoints.Count == 1)
                                {
                                    var point = Model.PickupPoints.First();
                                    selectedPointName = $"{point.Id}___{point.ProviderSystemName}";

                                    <input name="pickup-points-id" id="pickup-points-id" type="hidden" value="@($"{point.Id}___{point.ProviderSystemName}")" />
                                    <ul>
                                        <li class="single-pickup-point name">@point.Name</li>
                                        <li class="single-pickup-point address">@($"{point.Address} {point.City} {point.County} {point.StateName} {point.CountryName}")</li>
                                        @if (!string.IsNullOrEmpty(point.PickupFee))
                                        {
                                            <li class="single-pickup-point fee">@point.PickupFee</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <div class="title">
                                        <strong>@T("Checkout.PickupPoints.SelectPickupPoint")</strong>
                                    </div>
                                    <InputSelect @bind-Value="selectedPointName" name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                                        <option value="0">Please, select a pickup point...</option>
                                        @foreach (var point in Model.PickupPoints)
                                                        {
                                                            var addressLine = new System.Text.StringBuilder();
                                                            addressLine.Append(point.Name);
                                                            if (!string.IsNullOrEmpty(point.Address))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.Address);
                                                            }
                                                            if (!string.IsNullOrEmpty(point.City))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.City);
                                                            }
                                                            if (!string.IsNullOrEmpty(point.County))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.County);
                                                            }
                                                            if (!string.IsNullOrEmpty(point.StateName))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.StateName);
                                                            }
                                                            if (!string.IsNullOrEmpty(point.CountryName))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.CountryName);
                                                            }
                                                            if (!string.IsNullOrEmpty(point.PickupFee))
                                                            {
                                                                addressLine.AppendFormat(", {0}", point.PickupFee);
                                                            }
                                            <option value="@($"{point.Id}___{point.ProviderSystemName}")">@addressLine</option>
                                                        }
                                    </InputSelect>
                                }
                            </div>
                            if (Model.DisplayPickupPointsOnMap)
                            {
                                <div class="pickup-points-map" id="map"></div>
                            }
                        }
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @if (!Model.PickUpInStoreOnly)
                {
                    <div class="shipping-addresses" id="shipping-addresses-form" style="display:@(Model.PickUpInStore ? "none;": "block;")">
                        <Widget WidgetZone=@PublicWidgetZones.CheckoutShippingAddressTop />
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <div class="section select-shipping-address">
                                <div class="title">
                                    <strong>@T("Checkout.SelectShippingAddress")</strong>
                                </div>
                                <div class="address-grid">
                                    @foreach (var item in Model.ExistingAddresses)
                                    {
                                        <div class="address-item">
                                            <ul class="address-box">
                                                <li class="name">
                                                    @item.FirstName @item.LastName
                                                </li>
                                                <li class="email">
                                                    <label>@T("Address.Fields.Email"):</label>
                                                    <span>@item.Email</span>
                                                </li>
                                                @if (item.PhoneEnabled)
                                                {
                                                    <li class="phone">
                                                        <label>@T("Address.Fields.PhoneNumber"):</label>
                                                        <span>@item.PhoneNumber</span>
                                                    </li>
                                                }
                                                @if (item.FaxEnabled)
                                                {
                                                    <li class="fax">
                                                        <label>@T("Address.Fields.FaxNumber"):</label>
                                                        <span>@item.FaxNumber</span>
                                                    </li>
                                                }
                                                @if (item.CompanyEnabled && !string.IsNullOrEmpty(item.Company))
                                                {
                                                    <li class="company">
                                                        @item.Company
                                                    </li>
                                                }
                                                @if (item.StreetAddressEnabled)
                                                {
                                                    <li class="address1">
                                                        @item.Address1
                                                    </li>
                                                }
                                                @if (item.StreetAddress2Enabled && !string.IsNullOrEmpty(item.Address2))
                                                {
                                                    <li class="address2">
                                                        @item.Address2
                                                    </li>
                                                }
                                                @if (item.CityEnabled && !string.IsNullOrEmpty(item.City) ||
                                             item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                             item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                             item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                {
                                                    <li class="city-state-zip">
                                                        @if (item.CityEnabled && !string.IsNullOrEmpty(item.City))
                                                        {
                                                            @item.City
                                                            @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                         item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                         item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County))
                                                        {
                                                            @item.County
                                                            @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                         item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName))
                                                        {
                                                            @item.StateProvinceName
                                                            @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            @item.ZipPostalCode
                                                        }
                                                    </li>
                                                }
                                                @if (item.CountryEnabled && !string.IsNullOrEmpty(item.CountryName))
                                                {
                                                    <li class="country">
                                                        @item.CountryName
                                                    </li>
                                                }
                                                @if (!string.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                                {
                                                    <li class="custom-attributes-view">
                                                        @((MarkupString)item.FormattedCustomAddressAttributes)
                                                    </li>
                                                }
                                            </ul>
                                            <div class="select-button">
                                                <input type="button" value="@T("Checkout.ShipToThisAddress")" class="button-1 select-shipping-address-button" @onclick="@(e => SelectShippingAddress(item.Id))" />
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <Widget WidgetZone=@PublicWidgetZones.CheckoutShippingAddressMiddle />
                        <div class="section new-shipping-address">
                            <div class="title">
                                @if (Model.ExistingAddresses.Count > 0)
                                {
                                    <strong>@T("Checkout.OrEnterNewAddress")</strong>
                                }
                                else
                                {
                                    <strong>@T("Checkout.EnterShippingAddress")</strong>
                                }
                            </div>
                            <div class="enter-address">
                                <ValidationSummary />
                                <_CreateOrUpdateAddress Model="@Model.ShippingNewAddress" />
                            </div>
                        </div>
                        <Widget WidgetZone=@PublicWidgetZones.CheckoutShippingAddressBottom />
                    </div>
                }

                @if (Model.PickUpInStore)
                {
                    <div class="buttons">
                        <input type="button" @onclick="@(e => NewShippingAddress(Model))" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
                    </div>
                }
                else
                {
                    <div class="buttons">
                        <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
                    </div>
                }
            </EditForm>
            <div class="section order-summary">
                <div class="title">
                    <strong>@T("Checkout.OrderSummary")</strong>
                </div>
                <OrderSummary />
            </div>
        </div>
    }
</div>